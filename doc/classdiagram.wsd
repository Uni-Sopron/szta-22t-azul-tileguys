@startuml Azul classes
abstract class Container{
    + container[BLUE, YELLOW, RED, BLACK, BLUESTAR, EMPTY, FIRST_PLAYER] : Array[20,20,20,20,20,255,1]
    

}

Bag --o Container
class Bag{
    + setDisc(Disc)

}

DiscardPile --o Container
class DiscardPile{
    + getBrokenTiles(BroktenTiles)
    + fillUpBag()
}

Tile --* Container
enum Tile{
    BLUE
    YELLOW
    RED
    BLACK
    BLUESTAR
    EMPTY
    FIRST_PLAYER
}

Disc --o Container
class Disc{
    + getSameColoredTiles(Disc)
    + dropTilesToCenter()
    + setDisc()
}

CenterPool --o Container
class CenterPool{
    + getSameColoredTiles(Tile)
}

class PlayerBoard{
    + wall : Wall
    + sampleTiles0 : SampleTileRow
    + sampleTiles1 : SampleTileRow
    + sampleTiles2 : SampleTileRow
    + sampleTiles3 : SampleTileRow
    + sampleTiles4 : SampleTileRow
    + brokenTiles : BrokenTiles
    + points : int
    + firstplayer : boolean
    __methods__
    + calculatePoints(Wall wall, SampleTileRow str, firstPlayer first)

}

PlayerBoard --o SampleTileRow
class SampleTileRow{
    + row : Map[Tile,int count]
    __methods__
    + setRow(boolean isEmpty, Tile tile, int count)
    + getRow()
    + clearRow()

}

PlayerBoard --o Wall
class Wall{
    wall[4][4] : Array[][]
    __methods__
    + setWall()
    + getWall()
}

PlayerBoard --o BrokenTiles
class BrokenTiles{
    + brokenTiles[6] : Array[Tile]
    __setter__
    + addBrokenTiles()

}

Container --*  Game 
PlayerBoard --* Game
class Game {
    bag : Bag
    discardPile : DiscardPile
    disc : Disc
    centerPool : CenterPool
    playerBoards[] : PlayerBoard
    __methods__
    startGame()
    endGame() : Player winner
}
@enduml